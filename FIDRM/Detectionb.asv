/**************************************************************************
% Fuzzy Random-valued Impulse Noise Detection Method 
%
%  The paper of the FIDRM is proposed in: 
%
%  Stefan Schulte, Mike Nachtegael, Valérie De Witte, 
%  Dietrich Van Der Weken and  Etienne E. Kerre:
%  A Fuzzy Impulse Noise Detection and Reduction Method.
%  IEEE Transactions on Image Processing 15(5), 2006, 1153-1162
%  
% Stefan Schulte (stefan.schulte@Ugent.be):
% Last modified: 03/01/06
%
%**************************************************************************/

#include "mex.h"
#include <math.h>
#include <stdio.h>
#include <stdlib.h>


double LARGE (double x, double p1, double p2) {
   double res = 0.0;
   if ((x > p1) && (x < p2))   res = (x-p1)/(p2-p1);
   else if (x > p2)            res = 1.0;
   else                        res = 0.0;
   return res;
}

double SIM (double x, double a, double b) {
   double res = 0.0, y = 0.0, z = 0.0;
   y = maximum(minimum(1-x,1-a), minimum(1-x,1-b));
   z = maximum(minimum(x,a),minimum(x,b));
   res = maximum(y,z);
   return res;
}

double absol(double a) {
   double b;
   if(a<0)   b=-a;
   else   b=a;
   return b;
}

double minimum(double a, double b) {
   double x;
   if(a<=b)   x = a;
   else   x=b;
   return x;
}

double maximum(double a, double b) {
   double x;
   if(a<=b)   x = b;
   else   x=a;
   return x;
}

/**************************************************************************************
*  The main function for the calculation of the shrinkage method
*
***************************************************************************************/


void callMemb(double **A1,double *mem,double a, double b,int M, int N) { 
   int i,j,k, loop;   
   double *med, *histo,*sorted,*maxi;
   double som, tel, hlp,res, tmp, slope1, diff1, diff2, diff3;
   double l1, l2, l3, minslop1, minslop2, slope2;
//   double a = 40.0, b = 100.0;
   int **xy, **adj;

   int rand1a = 0;
   int rand1b = 0;
   int rand2a = 0;
   int rand2b = 0;
   
   xy = malloc(9*sizeof(int));
   adj = malloc(9*sizeof(int));
   for(i=0;i<9;i++){
      xy[i] = malloc(2*sizeof(int));
      adj[i] = malloc(2*sizeof(int));
   }
   
   med = malloc(8*sizeof(double));
      
   xy[0][0] = -1; xy[0][1] = -1; xy[1][0] = -1; xy[1][1] = 0; 
   xy[2][0] = -1; xy[2][1] =  1; xy[3][0] =  0; xy[3][1] = -1; 
   xy[4][0] =  0; xy[4][1] =  0; xy[5][0] =  0; xy[5][1] = 1; 
   xy[6][0] =  1; xy[6][1] = -1; xy[7][0] =  1; xy[7][1] = 0; 
   xy[8][0] =  1; xy[8][1] =  1; 

   adj[0][0] = 1; adj[0][1] = -1; adj[1][0] =  0; adj[1][1] = -1; 
   adj[2][0] = 1; adj[2][1] =  1; adj[3][0] =  1; adj[3][1] =  0; 
   adj[4][0] = 0; adj[4][1] =  0; adj[5][0] =  1; adj[5][1] =  0; 
   adj[6][0] = 1; adj[6][1] =  1; adj[7][0] =  0; adj[7][1] = -1; 
   adj[8][0] = 1; adj[8][1] = -1; 
               
      
   for(i=2; i<M-2; i++){
      for(j=2; j<N-2; j++){
         //--------------------------------------------
         //       Gradient values method
         //--------------------------------------------

         tel = 0;
         for (k = 0; k<9; k++){
            if (k==4) continue;
            diff1 = A1[i+xy[k][1]][j+xy[k][0]] - A1[i][j];
            diff2 = A1[i+xy[k][1]+adj[k][1]][j+xy[k][0]+adj[k][0]] - A1[i+adj[k][1]][j+adj[k][0]];
            diff3 = A1[i+xy[k][1]-adj[k][1]][j+xy[k][0]-adj[k][0]] - A1[i-adj[k][1]][j-adj[k][0]];
            
            l1 = LARGE(absol(diff1),a,b);
            l2 = LARGE(absol(diff2),a,b);
            l3 = LARGE(absol(diff3),a,b);
            
//            if ((i==250)&&(j==78))
//            printf("\t diff1 %f diff2 %f diff3 %f\n", diff1,diff2,diff3);

//            if ((i==250)&&(j==78))
//            printf("\t l1 %f l2 %f l3 %f\n", l1,l2,l3);

            
/*            pos1 = POS(diff1,c,d);
            neg1 = POS(-diff1,c,d);
            
            pos2 = POS(diff2,c,d);
            neg2 = POS(-diff2,c,d);

            pos3 = POS(diff3,c,d);
            neg3 = POS(-diff3,c,d);
*/

/*
            if(((diff1 < -5) && (diff2>5) && (diff3>5)) || ((diff1 >5) && (diff2<-5) && (diff3<-5))){
               if((l1>=l2)&&(l1>=l3)) res = l1;
               else if ((l2>=l1)&&(l2>=l3)) res = l2;
               else res = l3;
            }

            else if((LARGE(absol(l1-l2),a/255.0, b/255.0) > 0) && (LARGE(absol(l1-l3),a/255.0, b/255.0) > 0) && ((l1-l2)*(l1-l3)>0)){
               if((l1>=l2)&&(l1>=l3)) res = l1;
               else if ((l2>=l1)&&(l2>=l3)) res = l2;
               else res = l3;
            }
            else res = 0;
*/
//            res = SIM(l1,l2,l3);
            
            res = 1.0-  maximum( maximum(minimum(1-l1,1-l2), minimum(1-l1,1-l3)), maximum(minimum(l1,l2),minimum(l1,l3)));
            res = l1*res;
            
//            if ((i==250)&&(j==78))
//            printf("\t res %f  a %f  b %f c %f d %f \n", res,minimum(1-l1,1-l2),minimum(1-l1,1-l3),minimum(l1,l2),minimum(l1,l3));
            
            for (loop = 0; loop<tel; loop++){
                if (res < med[loop]){
                   hlp = med[loop];
                   med[loop] = res;
                   res = hlp;
                }
            }
            med[(int)tel] = res;
            tel++;
         }
//         for (k = 0; k<8; k++){
//           if ((i==250)&&(j==78))
//            printf("\t med %f \n", med[k]);
//         }
//         if ((med[3]+med[4])/2 >= 0.5) mem[i+j*M] = (med[3]+med[4])/2;
         mem[i+j*M] = minimum( minimum(med[6],med[7]),med[5]);
      }
   }

   for(i=0;i<9;i++)  free(xy[i]);
   free(xy); 
   for(i=0;i<9;i++)  free(adj[i]);
   free(adj); 
   free(med); 
}  /* End of callFuzzyShrink */


#define Im1      prhs[0]
#define PAR1     prhs[1]
#define PAR2     prhs[2]
#define OUT plhs[0]

/**
*  The interaction with Matlab (mex):
*        nlhs = amount of output arguments (= 1)
*        nrhs = amount of input arguments (= 3)
*     *plhs[] = link to the output 
*     *prhs[] = link to the input 
*
**/
void mexFunction( int nlhs, mxArray  *plhs[], int nrhs, const mxArray  *prhs[] ) {
    int row, col, i, M, N;
    double **mem, **A1, p1, p2;
    
    if (nlhs!=1)
        mexErrMsgTxt("It requires one output arguments only [M1].");
    if (nrhs!=3)
       mexErrMsgTxt("this method requires three input argument [Im1]");

    /* Get input values */  
    M = mxGetM(Im1);
    N = mxGetN(Im1);
    p1 = mxGetScalar(PAR2);
    p2 = mxGetScalar(PAR1);

    /**
    * Allocate memory for return matrices 
    **/
    OUT = mxCreateDoubleMatrix(M, N, mxREAL);  
    mem = mxGetPr(OUT);

    /**
    * Dynamic allocation of memory for the input array
    **/
    A1 = malloc(M*sizeof(int));
    for(i=0;i<M;i++)
      A1[i] = malloc(N*sizeof(double));

     /**
     * Convert ARRAY_IN and INPUT_MASK to 2x2 C arrays (MATLAB stores a two-dimensional matrix 
     * in memory as a one-dimensional array) 
     ***/
     for (col=0; col < N; col++)
         for (row=0; row < M; row++) {
             A1[row][col] = (mxGetPr(Im1))[row+col*M];
	      }
	      
	      
    /* Call callFuzzyShrink function */ 
    callMemb(A1,mem,p1,p2,M,N);

    for(i=0;i<M;i++)  free(A1[i]);
    free(A1); 
//    for(i=0;i<11;i++)  free(spv[i]);
//    free(spv); 
}
/* end mexFcn*/